{"version":3,"sources":["components/form-fields.tsx","components/DisplayBalance.tsx","components/Header.tsx","assets/spin-to-win.png","utils/time.ts","components/Wheel.tsx","utils/random.ts","utils/collections.ts","pages/CasinoWheelPage.tsx","App.tsx","getWeb3.ts","reportWebVitals.ts","index.tsx"],"names":["TextField","label","append","props","useField","field","meta","Form","Group","Label","InputGroup","Control","type","placeholder","isInvalid","touched","error","Append","Feedback","FormButton","children","isSubmitting","useFormikContext","Button","disabled","Spinner","size","animation","DisplayBalance","web3","useContext","Web3Context","account","AccountContext","balance","useQuery","eth","getBalance","refetchOnWindowFocus","isLoading","isError","isIdle","fromWei","data","Header","Navbar","bg","variant","sticky","Brand","Nav","className","Text","sleep","ms","Promise","resolve","setTimeout","SECTOR_COLORS","Wheel","forwardRef","ref","prizes","radius","width","sectorSize","length","useState","angle","setAngle","duration","setDuration","useImperativeHandle","spinToIndex","index","desiredAngle","Math","random","min","max","ceil","floor","a","strokeColor","style","overflow","position","height","zIndex","x","fill","transition","transform","strokeWidth","map","prize","i","color","stroke","d","getSectorPath","y","fontSize","cx","cy","r","xlinkHref","spinToWinImg","a1","a2","degtorad","PI","cr","cos","sin","shuffleExceptAt","array","before","slice","after","shuffled","_","shuffle","element","casinoWheelSchema","yup","amount","moreThan","required","CasinoWheelPage","casino","CasinoContext","queryClient","useQueryClient","setPrizes","wheelRef","useRef","useEffect","subscription","events","WheelSpin","console","wonPrizeIndex","BN","returnValues","toNumber","potentialPrizes","p","shuffledPrizes","current","invalidateQueries","unsubscribe","Container","maxWidth","Card","as","Body","initialValues","validationSchema","onSubmit","resetForm","methods","spinWheel","send","from","value","toWei","name","createContext","undefined","App","web3Loader","reject","window","addEventListener","ethereum","Web3","enable","log","provider","providers","HttpProvider","getAccounts","accounts","net","getId","networkId","deployedNetwork","Casino","networks","Contract","abi","address","isSuccess","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"02lIASaA,EAAgC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAWC,EAAY,oCACtDC,YAASD,GAD6C,mBACrEE,EADqE,KAC9DC,EAD8D,KAE5E,OACE,eAACC,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UAAaR,IACb,eAACS,EAAA,EAAD,WACE,cAACH,EAAA,EAAKI,QAAN,yBACEC,KAAK,QAAWP,GADlB,IAEEQ,YAAaV,EAAMU,YACnBC,UAAWR,EAAKS,SAAyB,MAAdT,EAAKU,SAEjCd,GAAU,cAACQ,EAAA,EAAWO,OAAZ,UAAoBf,IAC/B,cAACK,EAAA,EAAKI,QAAQO,SAAd,CAAuBN,KAAK,UAA5B,SACGN,EAAKU,eAQHG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvBC,EAAiBC,cAAjBD,aACR,OACE,eAACE,EAAA,EAAD,CACEX,KAAK,SACLY,SAAUH,EAFZ,UAIGA,GAAgB,cAACI,EAAA,EAAD,CAASC,KAAK,KAAKC,UAAU,SAC7C,IACAP,M,kBClCMQ,EAAqB,WAChC,IAAMC,EAAOC,qBAAWC,GAClBC,EAAUF,qBAAWG,GAErBC,EAAUC,YAAS,CAAC,UAAWH,IAAU,WAC7C,OAAOH,EAAKO,IAAIC,WAAWL,KAC1B,CAEDM,sBAAsB,IAGxB,OAAIJ,EAAQK,UACH,qDAGLL,EAAQM,QACH,yDAGLN,EAAQO,OACH,0CAGF,iDAAoBC,kBAAQR,EAAQS,UCvBhCC,EAAa,WACxB,IAAMZ,EAAUF,qBAAWG,GAE3B,OACE,eAACY,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAAxC,UACE,cAACH,EAAA,EAAOI,MAAR,qBACA,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACE,eAACN,EAAA,EAAOO,KAAR,4BAA4BpB,KAC5B,sBAAMmB,UAAU,SAChB,cAACN,EAAA,EAAOO,KAAR,UAAa,cAAC,EAAD,a,SCdN,MAA0B,wCCAlC,SAASC,EAAMC,GACpB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MCapD,IAAMI,EAAgB,CACpB,UACA,UACA,UACA,UACA,UACA,WAGWC,EAAQC,sBAA4B,WAAaC,GAAS,IAAnBC,EAAkB,EAAlBA,OAC5CC,EAAS,IACTC,EAAQD,IACRE,EAAa,IAAMH,EAAOI,OAHoC,EAK1CC,mBAAS,GALiC,mBAK7DC,EAL6D,KAKtDC,EALsD,OAMpCF,mBAAS,GAN2B,mBAM7DG,EAN6D,KAMnDC,EANmD,KAQpEC,8BAAoBX,GAAK,iBAAO,CACxBY,YADwB,SACZC,EAAOJ,GAAW,OAAD,iHAC3BK,EAAeV,EAAaS,EAAQT,EAAa,EACrDW,KAAKC,SAAWZ,EAAa,KCrBXa,EDqB2B,ECrBdC,EDqBiB,ECpBtDD,EAAMF,KAAKI,KAAKF,GAChBC,EAAMH,KAAKK,MAAMF,GACVH,KAAKK,MAAML,KAAKC,UAAYE,EAAMD,EAAM,IAAMA,GDoBjDT,GAAS,SAAAa,GAAC,OAAIA,EAAIA,EAAI,IAAM,IAAMP,KAClCJ,EAAYD,GALqB,SAM3BjB,EAAiB,IAAXiB,GANqB,iCCnBhC,IAAmBQ,EAAaC,IDmBA,cAUrC,IAEMI,EAAc,UACpB,OACE,sBAAKC,MAAO,CAAEC,SAAU,SAAUC,SAAU,WAAYtB,QAAOuB,OArB9BxB,KAqBjC,UACE,qBAAKqB,MAAO,CAAEE,SAAU,WAAYE,OAAQ,GAA5C,SACE,cAAC,IAAD,CACExB,MAAOA,EACPyB,EAAG1B,EACH2B,KAAMP,EACNzD,KAVUqC,uBAad,qBACEC,MAAOA,EAAOuB,OA/BexB,IAgC7BqB,MAAO,CACLO,WAAW,OAAD,OAASrB,EAAT,iCACVsB,UAAU,UAAD,QAAaxB,EAAb,SAJb,SAOE,oBAAGwB,UAAS,oBAAe7B,EAAf,aAA0BA,EAA1B,KAAZ,UACE,mBAAG8B,YAAY,IAAf,SACG/B,EAAOgC,KAAI,SAACC,EAAOC,GAClB,IAAMC,EAAQvC,EAAcsC,EAAItC,EAAcQ,QAC9C,OACE,oBAEE0B,UAAS,iBAAkBI,EAAI/B,EAAT,GAAb,KAFX,UAIE,sBACEiC,OAAQf,EACRU,YAAY,IACZH,KAAMO,EACNE,EAAGC,EAAc,EAAG,EAAGrC,GAASE,EAAa,EAAGA,EAAaA,EAAa,KAE5E,sBACEwB,EAAG1B,IACHsC,EAAGtC,KACHuC,SAAUvC,MACV2B,KAAK,QAJP,SAMGK,MAhBL,UACUA,GADV,OACkBC,SAqBxB,wBACEO,GAAG,IACHC,GAAG,IACHC,EAAG1C,MACH8B,YAlDuB,GAmDvBK,OAAQf,EACRO,KAAK,gBAEP,uBACEgB,UAAWC,EACX3C,MAAOA,EACPuB,OA3EyBxB,IA4EzB0B,GAAG,IACHY,GAAG,IACHT,UAAU,0BAQtB,SAASQ,EAAcX,EAAWY,EAAWtC,EAAgB6C,EAAYC,GACvE,IAAMC,EAAWlC,KAAKmC,GAAK,IACrBC,EAAKjD,EAAS,EAMpB,MAAO,IAAM0B,EAAI,IAAMY,EAAI,KALdzB,KAAKqC,IAAIH,EAAWD,GAAMG,EAAMvB,GAKN,MAJzBb,KAAKsC,IAAIJ,EAAWD,GAAMG,EAAMX,GAIK,KAAOW,EAAK,IAAMA,EAAK,WAH7DpC,KAAKqC,IAAIH,EAAWF,GAAMI,EAAMvB,GAG+C,MAF9Eb,KAAKsC,IAAIJ,EAAWF,GAAMI,EAAMX,GAE0D,I,8BElHnG,SAASc,EAAmBC,EAAY1C,GAC7C,IAAM2C,EAASD,EAAME,MAAM,EAAG5C,GACxB6C,EAAQH,EAAME,MAAM5C,EAAQ,GAC5B8C,EAAWC,IAAEC,QAAF,sBAAcL,GAAd,YAAyBE,KACpCI,EAAUP,EAAM1C,GACtB,MAAM,GAAN,mBACK8C,EAASF,MAAM,EAAG5C,IADvB,CAEEiD,GAFF,YAGKH,EAASF,MAAM5C,KCEtB,IAAMkD,EAAoBC,IAAW,CACnCC,OAAQD,MAAaE,SAAS,GAAGC,aAGtBC,EAAsB,WACjC,IAAMjG,EAAUF,qBAAWG,GACrBiG,EAASpG,qBAAWqG,GAEpBC,EAAcC,cAJmB,EAMXlE,mBAAS,CAAC,IAAK,IAAK,MANT,mBAMhCL,EANgC,KAMxBwE,EANwB,KAOjCC,EAAWC,iBAAiB,MAqBlC,OAnBAC,qBAAU,WACR,IAAMC,EAAeR,EAAOS,OAAOC,UAAd,uCAAwB,WAAO5H,EAAO2B,GAAd,qBAAAuC,EAAA,yDAC9B,MAATlE,EADuC,uBAEzC6H,QAAQ7H,MAAMA,GAF2B,iCAKrC8H,EAAgB,IAAIC,IAAGpG,EAAKqG,aAAaF,eAAeG,WACxDC,EAAkBvG,EAAKqG,aAAaE,gBAAgBpD,KAAI,SAAAqD,GAAC,OAAIzG,kBAAQyG,MAErEC,EAAiBjC,EAAgB+B,EAAiBJ,GACxDR,EAAUc,GATiC,mBAUrCb,EAASc,eAV4B,aAUrC,EAAkB5E,YAAYqE,EAAe,GAVR,wBAWrCV,EAAYkB,kBAAkB,WAXO,4CAAxB,yDAarB,OAAO,WACLZ,EAAaa,iBAEd,CAACrB,EAAOS,OAAQP,IAGjB,qCACE,cAAC,EAAD,IACA,cAACoB,EAAA,EAAD,CAAWrG,UAAU,qCAArB,SACE,qBAAKiC,MAAO,CAAEqE,SAAU,SAAxB,SACE,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAK9G,OAAN,CAAa+G,GAAG,KAAhB,mDAGA,eAACD,EAAA,EAAKE,KAAN,WACE,cAAC,IAAD,CACEC,cAAe,CAAE/B,OAAQ,IACzBgC,iBAAkBlC,EAClBmC,SAAQ,uCAAE,iCAAA7E,EAAA,6DAAS4C,EAAT,EAASA,OAAYkC,EAArB,EAAqBA,UAArB,SACF9B,EAAO+B,QAAQC,YAAYC,KAAK,CAAEC,KAAMpI,EAASqI,MAAOC,gBAAMxC,KAD5D,OAERkC,IAFQ,2CAAF,wDAHV,SAQG,kBACC,eAAC,IAAD,WACE,cAAC,EAAD,CACEO,KAAK,SACLtK,MAAM,aACNY,YAAY,iBACZX,OAAQ,cAACQ,EAAA,EAAW0C,KAAZ,oBAEV,cAAC,EAAD,mCAIN,qBAAKD,UAAU,gCAAf,SACE,cAACQ,EAAD,CAAOE,IAAK0E,EAAUzE,OAAQA,oBCtEjC/B,EAAcyI,6BAAcC,GAC5BxI,EAAiBuI,6BAAcC,GAC/BtC,EAAgBqC,6BAAcC,GAE9BC,EAAU,WACrB,IAAMC,EAAaxI,YAAS,OAAD,sBAAS,sCAAA+C,EAAA,sECV7B,IAAI3B,SAAc,SAACC,EAASoH,GACjCC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAA5F,EAAA,0DAEzB2F,OAAeE,SAFU,wBAGtBlJ,EAAO,IAAImJ,IAAMH,OAAeE,UAHV,kBAMnBF,OAAeE,SAASE,SANL,OAQ1BzH,EAAQ3B,GARkB,gDAU1B+I,EAAO,EAAD,IAVoB,gCAcpBC,OAAehJ,MAEjBA,EAAQgJ,OAAehJ,KAC7BgH,QAAQqC,IAAI,2BACZ1H,EAAQ3B,KAIFsJ,EAAW,IAAIH,IAAKI,UAAUC,aAClC,yBAEIxJ,EAAO,IAAImJ,IAAKG,GACtBtC,QAAQqC,IAAI,gDACZ1H,EAAQ3B,IA3BoB,6DDSE,cAC5BA,EAD4B,gBAEXA,EAAKO,IAAIkJ,cAFE,cAE5BC,EAF4B,OAG5BvJ,EAAUuJ,EAAS,GAHS,SAMV1J,EAAKO,IAAIoJ,IAAIC,QANH,cAM5BC,EAN4B,OAQ5BC,EAAkBC,EAAOC,SAASH,GAClCxD,EAAS,IAAIrG,EAAKO,IAAI0J,SAE1BF,EAAOG,IACPJ,GAAmBA,EAAgBK,SAZH,kBAe3B,CACLnK,OACAG,UACAkG,WAlBgC,6CAsBpC,GAAIyC,EAAWpI,UACb,OAAO,kDAET,IAAKoI,EAAWsB,UACd,OAAO,qDA3BkB,MA8BOtB,EAAWhI,KAArCd,EA9BmB,EA8BnBA,KAAMG,EA9Ba,EA8BbA,QAASkG,EA9BI,EA8BJA,OAEvB,OAAe,MAAXlG,EACK,uDAIP,cAACD,EAAYmK,SAAb,CAAsB7B,MAAOxI,EAA7B,SACE,cAACI,EAAeiK,SAAhB,CAAyB7B,MAAOrI,EAAhC,SACE,cAACmG,EAAc+D,SAAf,CAAwB7B,MAAOnC,EAA/B,SACE,cAAC,EAAD,WEtCKiE,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCARhE,GAAc,IAAIwE,IAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAqBC,OAAQ7E,GAA7B,SACE,cAAC,EAAD,QAGJ8E,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.e1c595f5.chunk.js","sourcesContent":["import { FieldHookConfig, useField, useFormikContext } from 'formik'\nimport { FC, ReactElement } from 'react'\nimport { Button, Form, InputGroup, Spinner } from 'react-bootstrap'\n\ntype TextFieldProps = FieldHookConfig<string> & {\n  label: string\n  append?: ReactElement\n}\n\nexport const TextField: FC<TextFieldProps> = ({ label, append, ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Form.Group>\n      <Form.Label>{label}</Form.Label>\n      <InputGroup>\n        <Form.Control\n          type=\"text\" {...field}\n          placeholder={props.placeholder}\n          isInvalid={meta.touched && meta.error != null}\n        />\n        {append && <InputGroup.Append>{append}</InputGroup.Append>}\n        <Form.Control.Feedback type=\"invalid\">\n          {meta.error}\n        </Form.Control.Feedback>\n      </InputGroup>\n    </Form.Group>\n  )\n}\n\n\nexport const FormButton: FC = ({ children }) => {\n  const { isSubmitting } = useFormikContext()\n  return (\n    <Button\n      type=\"submit\"\n      disabled={isSubmitting}\n    >\n      {isSubmitting && <Spinner size=\"sm\" animation=\"grow\" />}\n      {' '}\n      {children}\n    </Button>\n  )\n}\n","import { FC, useContext } from 'react'\nimport { useQuery } from 'react-query'\nimport { fromWei } from 'web3-utils'\nimport { AccountContext, Web3Context } from '../App'\n\nexport const DisplayBalance: FC = () => {\n  const web3 = useContext(Web3Context)\n  const account = useContext(AccountContext)\n\n  const balance = useQuery(['balance', account], () => {\n    return web3.eth.getBalance(account)\n  }, {\n    // Metamask steals window focus. Don't refetch automatically.\n    refetchOnWindowFocus: false,\n  })\n\n  if (balance.isLoading) {\n    return <div>Loading balance...</div>\n  }\n\n  if (balance.isError) {\n    return <div>Error getting balance!</div>\n  }\n\n  if (balance.isIdle) {\n    return <div>Idle...</div>\n  }\n\n  return <div>Your balance: {fromWei(balance.data)}</div>\n}\n","import { FC, useContext } from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { AccountContext } from '../App'\nimport { DisplayBalance } from './DisplayBalance'\n\nexport const Header: FC = () => {\n  const account = useContext(AccountContext)\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n      <Navbar.Brand>Casino</Navbar.Brand>\n      <Nav className=\"ml-auto\">\n        <Navbar.Text>Your account: {account}</Navbar.Text>\n        <span className=\"ml-4\" />\n        <Navbar.Text><DisplayBalance /></Navbar.Text>\n      </Nav>\n    </Navbar>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/spin-to-win.46bc60d5.png\";","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { forwardRef, useImperativeHandle, useState } from 'react'\nimport { CaretDownFill } from 'react-bootstrap-icons'\nimport spinToWinImg from '../assets/spin-to-win.png'\nimport { randomInt } from '../utils/random'\nimport { sleep } from '../utils/time'\n\ntype Props = {\n  prizes: string[]\n}\n\nexport type WheelRef = {\n  spinToIndex: (index: number, duration: number) => Promise<void>\n}\n\nconst SECTOR_COLORS = [\n  '#19C0FC',\n  '#EC0E24',\n  '#28B046',\n  '#0453EA',\n  '#EE2F0B',\n  '#881391',\n]\n\nexport const Wheel = forwardRef<WheelRef, Props>(({ prizes }, ref) => {\n  const radius = 250\n  const width = radius * 2, height = radius * 2\n  const sectorSize = 360 / prizes.length\n\n  const [angle, setAngle] = useState(0)\n  const [duration, setDuration] = useState(0) // seconds\n\n  useImperativeHandle(ref, () => ({\n    async spinToIndex(index, duration) {\n      const desiredAngle = sectorSize * index - sectorSize / 2 +\n        Math.random() * sectorSize + 360 * randomInt(5, 8)\n      // Reset angle (angle % 360 == 0) and add desiredAngle\n      setAngle(a => a - a % 360 + 360 + desiredAngle)\n      setDuration(duration)\n      await sleep(duration * 1000)\n    },\n  }))\n\n  const arrowSize = radius / 6\n  const outlineCircleStrokeWidth = 15\n  const strokeColor = '#F1D585'\n  return (\n    <div style={{ overflow: 'hidden', position: 'relative', width, height }}>\n      <div style={{ position: 'absolute', zIndex: 2 }}>\n        <CaretDownFill\n          width={width}\n          x={radius}\n          fill={strokeColor}\n          size={arrowSize}\n        />\n      </div>\n      <svg\n        width={width} height={height}\n        style={{\n          transition: `all ${duration}s cubic-bezier(0.3,-0.05,0,1)`,\n          transform: `rotate(${-angle}deg)`,\n        }}\n      >\n        <g transform={`translate(${radius}, ${radius})`}>\n          <g strokeWidth=\"2\">\n            {prizes.map((prize, i) => {\n              const color = SECTOR_COLORS[i % SECTOR_COLORS.length]\n              return (\n                <g\n                  key={`${prize}${i}`}\n                  transform={`rotate(${-90 + i * sectorSize})`}\n                >\n                  <path\n                    stroke={strokeColor}\n                    strokeWidth=\"2\"\n                    fill={color}\n                    d={getSectorPath(0, 0, radius, -sectorSize / 2, sectorSize - sectorSize / 2)}\n                  />\n                  <text\n                    x={radius * 0.5}\n                    y={radius / 8 * 0.4}  // Relative to fontSize\n                    fontSize={radius / 8}\n                    fill=\"white\"\n                  >\n                    {prize}\n                  </text>\n                </g>\n              )\n            })}\n          </g>\n          <circle\n            cx=\"0\"\n            cy=\"0\"\n            r={radius - outlineCircleStrokeWidth / 2}\n            strokeWidth={outlineCircleStrokeWidth}\n            stroke={strokeColor}\n            fill=\"transparent\"\n          />\n          <image\n            xlinkHref={spinToWinImg}\n            width={width}\n            height={height}\n            x={-radius}\n            y={-radius}\n            transform=\"scale(0.4)\"\n          />\n        </g>\n      </svg>\n    </div>\n  )\n})\n\nfunction getSectorPath(x: number, y: number, radius: number, a1: number, a2: number) {\n  const degtorad = Math.PI / 180\n  const cr = radius - 5\n  const cx1 = (Math.cos(degtorad * a2) * cr) + x\n  const cy1 = (-Math.sin(degtorad * a2) * cr) + y\n  const cx2 = (Math.cos(degtorad * a1) * cr) + x\n  const cy2 = (-Math.sin(degtorad * a1) * cr) + y\n\n  return 'M' + x + ' ' + y + ' ' + cx1 + ' ' + cy1 + ' A' + cr + ' ' + cr + ' 0 0 1 ' + cx2 + ' ' + cy2 + 'Z'\n}\n","/**\n * Returns a random number between min (inclusive) and max (exclusive).\n */\nexport function randomFloat(min: number, max: number) {\n  return Math.random() * (max - min) + min\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number, max: number) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n","import _ from 'lodash'\n\n/**\n * Shuffle all elements except the element at `index`.\n */\nexport function shuffleExceptAt<T>(array: T[], index: number): T[] {\n  const before = array.slice(0, index)\n  const after = array.slice(index + 1)\n  const shuffled = _.shuffle([...before, ...after])\n  const element = array[index]!\n  return [\n    ...shuffled.slice(0, index),\n    element,\n    ...shuffled.slice(index),\n  ]\n}\n","import BN from 'bn.js'\nimport { Form, Formik } from 'formik'\nimport { FC, useContext, useEffect, useRef, useState } from 'react'\nimport { Card, Container, InputGroup } from 'react-bootstrap'\nimport { useQueryClient } from 'react-query'\nimport { Subscription } from 'web3-core-subscriptions'\nimport { fromWei, toWei } from 'web3-utils'\nimport * as yup from 'yup'\nimport { AccountContext, CasinoContext } from '../App'\nimport { FormButton, TextField } from '../components/form-fields'\nimport { Header } from '../components/Header'\nimport { Wheel, WheelRef } from '../components/Wheel'\nimport { shuffleExceptAt } from '../utils/collections'\n\n\nconst casinoWheelSchema = yup.object({\n  amount: yup.number().moreThan(0).required(),\n})\n\nexport const CasinoWheelPage: FC = () => {\n  const account = useContext(AccountContext)\n  const casino = useContext(CasinoContext)\n\n  const queryClient = useQueryClient()\n\n  const [prizes, setPrizes] = useState(['1', '2', '3'])\n  const wheelRef = useRef<WheelRef>(null)\n\n  useEffect(() => {\n    const subscription = casino.events.WheelSpin(async (error, data) => {\n      if (error != null) {\n        console.error(error)\n        return\n      }\n      const wonPrizeIndex = new BN(data.returnValues.wonPrizeIndex).toNumber()\n      const potentialPrizes = data.returnValues.potentialPrizes.map(p => fromWei(p))\n      // Shuffle all prizes except the prize at index `wonPrizeIndex`\n      const shuffledPrizes = shuffleExceptAt(potentialPrizes, wonPrizeIndex)\n      setPrizes(shuffledPrizes)\n      await wheelRef.current?.spinToIndex(wonPrizeIndex, 5)\n      await queryClient.invalidateQueries('balance')\n    }) as unknown as Subscription<unknown>\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [casino.events, queryClient])\n\n  return (\n    <>\n      <Header />\n      <Container className=\"mt-4 d-flex justify-content-center\">\n        <div style={{ maxWidth: '700px' }}>\n          <Card>\n            <Card.Header as=\"h3\">\n              Spin the Wheel! Enter amount and spin\n            </Card.Header>\n            <Card.Body>\n              <Formik\n                initialValues={{ amount: '' }}\n                validationSchema={casinoWheelSchema}\n                onSubmit={async ({ amount }, { resetForm }) => {\n                  await casino.methods.spinWheel().send({ from: account, value: toWei(amount) })\n                  resetForm()\n                }}\n              >\n                {() => (\n                  <Form>\n                    <TextField\n                      name=\"amount\"\n                      label=\"Bet amount\"\n                      placeholder=\"Enter your bet\"\n                      append={<InputGroup.Text>ETH</InputGroup.Text>}\n                    />\n                    <FormButton>Spin the wheel</FormButton>\n                  </Form>\n                )}\n              </Formik>\n              <div className=\"d-flex justify-content-center\">\n                <Wheel ref={wheelRef} prizes={prizes} />\n              </div>\n            </Card.Body>\n          </Card>\n        </div>\n      </Container>\n    </>\n  )\n}\n","import { createContext, FC } from 'react'\nimport { useQuery } from 'react-query'\nimport Web3 from 'web3'\nimport { Casino as CasinoType } from '../../types/web3-v1-contracts/Casino'\nimport Casino from './contracts/Casino.json'\nimport { getWeb3 } from './getWeb3'\nimport { CasinoWheelPage } from './pages/CasinoWheelPage'\n\nexport const Web3Context = createContext(undefined as unknown as Web3)\nexport const AccountContext = createContext(undefined as unknown as string)\nexport const CasinoContext = createContext(undefined as unknown as CasinoType)\n\nexport const App: FC = () => {\n  const web3Loader = useQuery('web3', async () => {\n    const web3 = await getWeb3()\n    const accounts = await web3.eth.getAccounts()\n    const account = accounts[0]\n\n    // Get contract instance\n    const networkId = await web3.eth.net.getId()\n    // @ts-expect-error\n    const deployedNetwork = Casino.networks[networkId]\n    const casino = new web3.eth.Contract(\n      // @ts-expect-error\n      Casino.abi,\n      deployedNetwork && deployedNetwork.address,\n    ) as unknown as CasinoType\n\n    return {\n      web3,\n      account,\n      casino,\n    }\n  })\n\n  if (web3Loader.isLoading) {\n    return <div>Loading web3...</div>\n  }\n  if (!web3Loader.isSuccess) {\n    return <div>Error loading web3</div>\n  }\n\n  const { web3, account, casino } = web3Loader.data\n\n  if (account == null) {\n    return <div>No account connected</div>\n  }\n\n  return (\n    <Web3Context.Provider value={web3}>\n      <AccountContext.Provider value={account}>\n        <CasinoContext.Provider value={casino}>\n          <CasinoWheelPage />\n        </CasinoContext.Provider>\n      </AccountContext.Provider>\n    </Web3Context.Provider>\n  )\n}\n","import Web3 from 'web3'\n\nexport function getWeb3() {\n  return new Promise<Web3>((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum)\n        try {\n          // Request account access if needed\n          await (window as any).ethereum.enable()\n          // Accounts now exposed\n          resolve(web3)\n        } catch (error) {\n          reject(error)\n        }\n      }\n      // Legacy dapp browsers...\n      else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3\n        console.log(\"Injected web3 detected.\")\n        resolve(web3)\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        )\n        const web3 = new Web3(provider)\n        console.log(\"No web3 instance injected, using Local web3.\")\n        resolve(web3)\n      }\n    })\n  })\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { App } from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\n\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}